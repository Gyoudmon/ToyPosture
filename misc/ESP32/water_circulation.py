# MindPlus with microPython
# Mycorrhizal network

from mpython import *
from machine import Timer as SysTimer

from random import randint

import time

###############################################
class Timer(object):
  _id = 0
  
  def __init__(self, interval):
    Timer._id += 1
    self._self = SysTimer(Timer._id)
    self._self.init(period=interval, mode=SysTimer.PERIODIC,
                      callback=  lambda a: self.on_tick(a))
    
  def on_tick(self, _):
    pass

class PhysicsWatcher(Timer):
  def __init__(self, target):
    self.target = target;
    super(PhysicsWatcher, self).__init__(100)
    
  def on_tick(self, _):
    datum = light.read()
    if datum > 0: self.on_light(datum, datum / 4095)
    
    datum = sound.read()
    if datum > 0: self.on_sound(datum, datum / 4095)
    
  def on_light(self, value, percentage):
    self.target.on_light(value, percentage)
    
  def on_sound(self, value, percentage):
    self.target.on_sound(value, percentage)
    
class TouchpadWatcher(Timer):
  def __init__(self, threshold, target):
    self.target = target
    
    super(TouchpadWatcher, self).__init__(100)
    
    self._threshold = { 'P': threshold, 'Y': threshold, 'T': threshold, 'H': threshold, 'O': threshold, 'N': threshold }
    self._status = { 'P': 0, 'Y': 0, 'T': 0, 'H': 0, 'O': 0, 'N': 0 }
    
    
  def on_tick(self, _):
    try:
      touchPad_P.read();
    except:
      return
  
    self._dispatch(touchPad_P.read(), 'P', 0)
    self._dispatch(touchPad_Y.read(), 'Y', 1)
    self._dispatch(touchPad_T.read(), 'T', 2)
    self._dispatch(touchPad_H.read(), 'H', 3)
    self._dispatch(touchPad_O.read(), 'O', 4)
    self._dispatch(touchPad_N.read(), 'N', 5)
    
  def on_touchpad_key(self, keyname, frequency, key_idx):
    self.target.on_touchpad_key(keyname, frequency, key_idx)
  
  def _dispatch(self, read_datum, keyname, idx):
    if read_datum < self._threshold[keyname]:
      self._status[keyname] += 1
      self.on_touchpad_key(keyname, self._status[keyname], idx)
      
class ButtonWatcher(object):
  def __init__(self, target):
    self.target = target
    button_a.irq(trigger=Pin.IRQ_FALLING,
                  handler= lambda a: self._ugly_python(button_a.value(), 'A'))
    button_b.irq(trigger=Pin.IRQ_FALLING,
                  handler= lambda a: self._ugly_python(button_b.value(), 'B'))
    
  def on_button_pressed(self, who):
    self.target.on_button_pressed(who)

  def _ugly_python(self, value, who):
    if not value == 1:
      self.on_button_pressed(who)
      
###############################################
background = bytearray([0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x1e,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0xe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xf,0x6,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc1,0x2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x0,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0xf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x0,0x1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x0,0x1,0xbc,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x1,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x3d,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x7f,0x7b,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x8,0x49,0x2,0x7f,0xfd,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0xb,0xf,0xbf,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x8,0xfb,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x3f,0xff,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x4,0xc6,0x3e,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x67,0x1b,0x8f,0xc7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x3,0xe6,0x3f,0x87,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x7,0xe8,0x11,0x61,0xef,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x10,0xc1,0xfc,0x1e,0xbd,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x6,0x1,0xd2,0x1e,0xa,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x27,0x81,0xc8,0x7f,0xbf,0xbf,0xf7,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x1b,0xf9,0xe0,0x3f,0xfe,0x1d,0xf6,0x7f,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x5,0x7b,0xf0,0x5f,0xe4,0x0,0xf9,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x1,0xef,0xfd,0xcf,0xfb,0x18,0x7f,0xff,0xff,0xff,0xff,0xff,0x0,0x0,0x0,0x0,0x0,0x7f,0xff,0x87,0xfe,0xff,0x7f,0xff,0xff,0xff,0xfe,0x0,0x0,0x0,0x0,0x0,0x0,0x7f,0xff,0xcd,0xcf,0xb9,0xf7,0xff,0xff,0xf8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xff,0xff,0xff,0xfe,0xff,0xff,0xf8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xff,0xf0,0x0,0x3f,0xff,0xfc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xff,0xf8,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xdf,0xc0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x80,0x0,0x0,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0x0,0x0,0x0,0x0,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0xe0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x1,0x10,0x12,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x3,0xfd,0xfc,0xe0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x4a,0x1f,0xff,0xf0,0xa2,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x1c,0x3f,0xff,0xe0,0x2,0xe0,0x70,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0xf,0x2f,0xff,0xf3,0xa1,0xe0,0x7e,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x3,0xcf,0xff,0xff,0xf1,0xc1,0xfc,0x7f,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x1f,0xff,0xff,0xff,0xd8,0x80,0xf8,0xff,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x78,0x3b,0xff,0xff,0xff,0xe0,0x1,0xf8,0xff,0x0,0x0,0x0,0x0,0x1,0x80,0x1,0xfc,0xf,0xff,0xff,0xff,0xe0,0x0,0xe4,0xff,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0xf0,0x3,0xff,0xff,0xff,0xc0,0x61,0xe2,0xff,0x0,0x0,0x0,0x0,0x2,0x0,0x1,0xe0,0x3,0xff,0xff,0xff,0x80,0x40,0xe2,0x7f,0x0,0x0,0x0,0x1c,0x2,0x0,0x1,0xc0,0x1e,0xff,0xff,0xff,0xe0,0x1,0xe0,0x7e,0x0,0x0,0x80,0x3c,0x8,0x0,0x0,0xc0,0x0,0x7f,0xff,0xff,0x80,0x1,0xf8,0xfe,0x0,0x3,0x80,0x3c,0xf,0x0,0x14,0x40,0xe,0x3f,0xff,0xff,0xe0,0x1,0xe1,0xf8])

oled_width = 128
oled_height = 64

###############################################
def display_background():
  oled.Bitmap(0, 0, background, oled_width, oled_height, 0)
  
def oled_refresh():
  display_background()
  oled.show()

###############################################
class WaterCirculation(Timer):
  def __init__(self, interval):
    super(WaterCirculation, self).__init__(interval)
  
  def __getattr__(self, name):
    def method(*args): pass
    return method
  
  def on_tick(self, _):
    pass
  
  def on_button_pressed(self, who):
    if who == 'A':
      self.rain()
    elif who == 'B':
      self.snow()
    
  def on_touchpad_key(self, keyname, frequency, key_idx):
    self.evaporate(keyname, frequency, key_idx)
  
  def evaporate(self, keyname, frequency, key_idx):
    oled.DispChar("evaporate", 0, 0)
    oled.show()
    pass
  
  def rain(self):
    oled.DispChar("rain", 0, 0)
    oled.show()
    pass
  
  def snow(self):
    oled.DispChar("snow", 0, 0)
    oled.show()
    pass

###############################################
if __name__ == "__main__":
  oled_refresh()
  universe = WaterCirculation(100)
  touchpad_watcher = TouchpadWatcher(400, universe)
  button_watcher = ButtonWatcher(universe)
  physics_watcher = PhysicsWatcher(universe)


