# MindPlus with microPython
# Mycorrhizal network

from mpython import *
from machine import Timer

from random import randint

import time

###############################################
class Hypha(object):
  def __init__(self, y0):
    self.okay = False
    self.ys = []
    self.dx = 0
    self.x0 = 0
    self.xn = 0
    self.y0 = y0

###############################################
trees = [bytearray([0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0xff,0xff,0xff,0xf5,0xff,0xff,0xc0,0xff,0xff,0xff,0xe1,0xff,0xff,0xc0,0xff,0xff,0xf9,0xc9,0xff,0xff,0xc0,0xff,0xff,0xc0,0x82,0x7f,0xff,0xc0,0xff,0xff,0x80,0x40,0x3f,0xff,0xc0,0xff,0xff,0x0,0x0,0xf,0xff,0xc0,0xff,0xff,0x0,0x0,0xf,0xff,0xc0,0xff,0xfc,0x0,0x0,0x7,0xff,0xc0,0xff,0xfc,0x0,0x0,0x7,0xff,0xc0,0xff,0xf8,0x0,0x0,0x7,0xff,0xc0,0xff,0xf0,0x0,0x0,0x3,0xff,0xc0,0xff,0xe0,0x0,0x0,0x3,0xff,0xc0,0xff,0xe0,0x0,0x0,0x3,0xff,0xc0,0xff,0xe0,0x0,0x0,0x3,0xff,0xc0,0xff,0xe0,0x0,0x0,0x3,0xff,0xc0,0xff,0xe0,0x0,0x0,0x3,0xff,0xc0,0xff,0xe0,0x0,0x0,0x1,0xff,0xc0,0xff,0xe0,0x0,0x0,0x1,0xff,0xc0,0xff,0xd0,0x0,0x0,0x0,0xff,0xc0,0xff,0x80,0x0,0x0,0x0,0xff,0xc0,0xff,0x80,0x0,0x0,0x0,0xff,0xc0,0xff,0x80,0x0,0x0,0x0,0x7f,0xc0,0xff,0x80,0x0,0x0,0x0,0x3f,0xc0,0xff,0x80,0x0,0x0,0x0,0x3f,0xc0,0xfe,0x0,0x0,0x0,0x0,0x3f,0xc0,0xfe,0x0,0x0,0x0,0x0,0x1f,0xc0,0xfc,0x0,0x0,0x0,0x0,0x1f,0xc0,0xfc,0x0,0x0,0x0,0x0,0x1f,0xc0,0xfc,0x0,0x0,0x0,0x0,0x1f,0xc0,0xff,0x0,0x0,0x0,0x0,0xf,0xc0,0xff,0x0,0x2,0x0,0x0,0x1f,0xc0,0xff,0x72,0x82,0x84,0xc0,0x3f,0xc0,0xff,0xf5,0x82,0x1,0xe0,0x3f,0xc0,0xff,0xff,0x15,0x2f,0xe0,0x3f,0xc0,0xff,0xff,0xfe,0x2f,0xe5,0x3f,0xc0,0xff,0xff,0xff,0x3f,0xcd,0xff,0xc0,0xff,0xff,0xff,0x1f,0xdf,0xff,0xc0,0xff,0xff,0xff,0x3f,0xff,0xff,0xc0,0xff,0xff,0xff,0x3f,0xff,0xff,0xc0,0xff,0xff,0xff,0x3f,0xff,0xff,0xc0,0xff,0xff,0xff,0x3f,0xff,0xff,0xc0,0xff,0xff,0xff,0x3f,0xff,0xff,0xc0,0xff,0xff,0xff,0x3f,0xff,0xff,0xc0,0xff,0xff,0xff,0x3f,0xff,0xff,0xc0,0xff,0xff,0xff,0x3f,0xff,0xff,0xc0,0xff,0xff,0xff,0x3f,0xff,0xff,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0xc0]),
          bytearray([0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0xff,0xff,0xd3,0xff,0xff,0xff,0xc0,0xff,0xff,0xc0,0x4f,0xff,0xff,0xc0,0xff,0xff,0x80,0x7,0xff,0xff,0xc0,0xff,0xfc,0x0,0x1,0xbf,0xff,0xc0,0xff,0xfc,0x0,0x0,0xff,0xff,0xc0,0xff,0xf8,0x0,0x7,0xff,0xff,0xc0,0xff,0xe0,0x0,0x0,0x3f,0xff,0xc0,0xff,0xc0,0x0,0x0,0xf,0xff,0xc0,0xff,0xc0,0x0,0x0,0x3,0xff,0xc0,0xff,0x80,0x0,0x0,0x0,0x7f,0xc0,0xfe,0x0,0x0,0x0,0x0,0x1f,0xc0,0xfe,0x0,0x0,0x0,0x0,0x1f,0xc0,0xfe,0x0,0x0,0x0,0x40,0x1f,0xc0,0xfe,0x0,0x0,0x0,0x0,0x7,0xc0,0xfc,0x0,0x0,0x0,0x0,0xf,0xc0,0xf8,0x0,0x0,0x0,0x4,0x23,0xc0,0xe0,0x0,0x0,0x0,0x0,0x3,0xc0,0xf0,0x0,0x0,0x80,0x0,0x7,0xc0,0xe0,0x0,0x0,0x0,0x0,0x1,0xc0,0xe0,0x0,0x0,0x0,0x0,0x8,0xc0,0xc0,0x0,0x0,0x0,0x0,0x8,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x1,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0xc0,0x80,0x0,0x0,0x0,0x0,0x1,0xc0,0x80,0x0,0x0,0x0,0x0,0x0,0x40,0x80,0x0,0x0,0x0,0x0,0x0,0x40,0xc0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0xe,0xc0,0xc0,0x0,0x0,0x0,0x0,0x5,0xc0,0x80,0x0,0x0,0x0,0x0,0x7,0xc0,0x80,0x0,0x0,0x0,0x0,0x0,0x40,0x80,0x0,0x0,0x0,0x0,0x0,0x40,0x80,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x9,0xc0,0xe0,0x0,0x0,0x0,0x0,0xb,0xc0,0xe0,0x0,0x0,0x0,0x0,0x9,0xc0,0xec,0xc0,0x0,0x7,0xff,0xff,0xc0,0xff,0xff,0xf0,0x3f,0xff,0xff,0xc0,0xff,0xff,0xfc,0xff,0xff,0xff,0xc0,0xff,0xff,0xfc,0xff,0xff,0xff,0xc0,0xff,0xff,0xfc,0xff,0xff,0xff,0xc0,0xff,0xff,0xfc,0xff,0xff,0xff,0xc0,0xff,0xff,0xfc,0xff,0xff,0xff,0xc0,0xff,0xff,0xfc,0x7f,0xff,0xff,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0xc0])]

oled_width = 128
oled_height = 64
surface_y = 54

# Function couldn't modify global variables by default
# but can modify values in a global dictionary
#   or members of a global object,
hypha = Hypha(surface_y)

###############################################
def display_info(text):
  print(text)
  oled.DispChar(text, 0, 0)
  oled.show()
  
def display_tree():
  tsize = 50
  midpoint = oled_width // 2
  tx = (midpoint - tsize) // 2
  ty = (oled_height - tsize) // 2
  oled.Bitmap(tx, ty, trees[0], tsize, tsize, 0)
  oled.Bitmap(tx + midpoint, ty, trees[1], tsize, tsize, 0)
  oled.line(0, surface_y, oled_width, surface_y, 0)
  
def display_hypha():
  size = len(hypha.ys)
  
  if size > 0:
    px = hypha.x0
    py = hypha.y0
    
    for i in range(1, size):
      nx = px + hypha.dx
      ny = hypha.ys[i]
      oled.line(px, py, nx, ny, 1)
      px = nx
      py = ny
      
    if hypha.okay:
      oled.line(px, py, hypha.xn, hypha.y0, 1)
  
def oled_refresh():
  oled.fill(255)
  display_tree()
  display_hypha()
  oled.show()

###############################################
def on_tick(_):
  print('here')
  if not hypha.okay:
    if hypha.x0 > 0:
      size = len(hypha.ys)

      if size > 0:
        py = hypha.ys[-1]
      else:
        py = hypha.y0
      
      ny = py + randint(-1, 1)
      
      if (ny > oled_height) or (ny < surface_y):
        hypha.ys.append(py)
      else:
        hypha.ys.append(ny)
      
      if size > (oled_width // 2):
        hypha.okay = True
    
      oled_refresh()

def on_A_pressed(_):
  if not button_a.value() == 1:
    if not hypha.okay:
      if hypha.x0 == 0:
        hypha.x0 = oled_width // 4
        hypha.xn = oled_width // 2 + hypha.x0
        hypha.dx = 1

def on_B_pressed(_):
  if not button_b.value() == 1:
    if not hypha.okay:
      if hypha.x0 == 0:
        hypha.x0 = 3 * oled_width // 4
        hypha.xn = hypha.x0 - oled_width // 2
        hypha.dx = -1
    
###############################################
def timer_start():
  t = Timer(1)
  t.init(period=100, mode=Timer.PERIODIC, callback=on_tick)
  
def user_action_start():
  button_a.irq(trigger=Pin.IRQ_FALLING, handler=on_A_pressed)
  button_b.irq(trigger=Pin.IRQ_FALLING, handler=on_B_pressed)
  
###############################################
def main():
  oled_refresh()
  user_action_start()
  timer_start()

###############################################
if __name__ == "__main__":
  main()
