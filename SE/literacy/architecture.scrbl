#lang scribble/base

@require{literacy.rkt}

@handbook-story{架构设计}

在前面的需求分析基础之上，先简单说一下本系统用户群体的特点，缺乏计算机专业知识、对自己的版权敏感但对隐私不敏感。
因此命令行用户接口肯定不行，而两种常见的图形用户接口有桌面应用和浏览器-服务器应用（Web应用），其逻辑结构大同小异，
而且都可以部署在机构内部，而不使用云服务。

于是，信息管理系统天然具备数据中心属性；图形用户界面又天然具备事件驱动属性，再加上领域问题要求应用具备较高的可视化能力。
因此本系统的架构风格属于分层的数据中心架构。

@handbook-scenario{逻辑结构设计}

@tamer-figure["a:logic" "逻辑结构模型"]{@image["stone/vsdx/logic_architecture.png" #:scale 0.4]}

典型的信息管理系统没太多可讨论的点，俗套但有效的设计永远是分层，三层或四层，甚至更多一些。
本系统跟传统的数据中心应用不同的是，其重心在用户接口(可视化能力)和数据模型上，
业务控制方面的功能倒不算复杂，主要是人工参与环节较多，且不适合信息化。
因此控制层特意设计成与UI合并，减少了一层。

@tamer-figure-ref{a:logic}即是本系统的逻辑结构图，其数据模型部分给出了需求分析阶段得到的所有分析类的关系；
数据存储系统包括数据库和文件系统，数据库是信息管理系统的标配不再赘述；文件系统提供实体存储空间（教室和仓库）的结构信息，
用于获知存储空间的详细信息。理想情况下，机构可以提供房屋设计图，系统直接加载并实时渲染；如果没有房屋设计图，
用户可以借助其他软件自己绘制一个简单的，并标记好存储槽位。

现在暂时把注意力放在UI层上，需求分析阶段我们已经从本系统中抽象出了两个子系统，即“材料清单管理子系统”和“材料存储管理子系统”。
其中，“材料清单管理子系统”没有可视化需求，做成常规GUI应用即可；“材料存储管理子系统”将按照Game UI的标准来设计一套新框架，
这部分在详细设计阶段再说。

@handbook-scenario{物理结构设计}

@tamer-figure["a:physics" "物理结构模型"]{@image["stone/vsdx/physical_architecture.png" #:scale 0.56]}

以前的桌面应用开发难度极高，移动设备操作系统多样性丰富，每一个都得单独开发。
而现在的跨平台本地应用框架极大的弥补了这个缺点，因此对于本系统而言，Web应用的优势并不明显。
因此，本系统建议物理上分为两部分，即桌面客户端和数据存储服务器（包括数据库服务器和文件服务器），
而不需要Web服务器。

@tamer-figure-ref{a:physics}即是本系统的物理结构图，以网络图的形式呈现。
在部署上不考虑云服务，一是出于成本；二是避免版权和隐私问题。

系统部署在移动设备上是为了方便老师在准备材料的时候能及时浏览信息，尤其是能及时更新信息。

部署在机构内部有一个弊端，机构可能没有外网IP，因此只能借助局域网(通常是无线局域网)来链接，
为避免教室离太远导致网络信号不好，系统特别提供打印功能，以把教室或仓库的平面图打印出来带到现场去查阅。

@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@handbook-reference[]
