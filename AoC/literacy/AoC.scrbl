#lang scribble/sigplan @nocopyright

@(require "literacy.rkt")
@(require "graphviz.rkt")

@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@handbook-title/pkg-desc[]

@abstract{代码降临节（Advent of Code）是始于2015年的年度编程挑战活动，
 也是圣诞日历文化在科技圈的延伸。活动每年12月1日开始，每天用代码解一个谜题，
 一直到圣诞节当天结束，共计25天25个谜题。谜题由一个或一系列虚构的故事引出，
 每题包含两部分，必须先完成第一部分才能解锁第二部分。虽然活动发生在每年的最后一个月，
 但创始人事先要花4-5个月（的业余时间）来出题。

 此挑战活动不要求参与者有计算机科班背景，对语言、软件和硬件配置也没有要求（你甚至可以只用纸笔演算）。
 懂点编程基础知识、有一定的问题求解技巧即可开始。总之，从青少练手、到面试热身、
 再到企业培训，各种等级的参与者都能从中找到价值。

 此活动的主旨只有一个：用代码迎接圣诞节的到来。你应该关注对你自己有意义的事，
 也即要对自己有认识、有目标、完全没必要随大流。比如，你可以尝试选用一些新语言来解谜，
 并注意比较新语言解这些谜题时有哪些优势和不足，自己学到东西才是合理的期待。

 不过，初学者肯定很难做到随便选一门新语言就开干，而这就是跟我学编程的核心要义之一：
 我更关注帮你建立@bold{学习新语言}的元认知能力（或者更一般地说，是@bold{像学神一样学习}的能力）。
 从现在开始，你会不断看到别人问“语言到底重不重要”，很明显这个问题的答案跟时间有关，
 你人生的不同阶段、你目标的不同都会有不同回答。所以，我建议你不用去看别人的相关讨论，
 网络上一叶障目的无效讨论太多了；时机到了，我会帮你自己去正确思考这个问题。

 25个谜题的难度是递进关系，有提交人数的变化趋势为证，因此你不用急着往全球积分榜上挤，
 那都是些能在几分钟到一个小时之内就秒杀谜题的怪物（跟考试、竞赛一样，任何竞技活动
 都需要专门训练和大量练习以成为该项活动的熟练工，而这显然不是我们参与此活动的目标）。}

@handbook-statistics[#:ignore '(#px"Cpp/digitama/big_bang") #:filter '(#px"AoC/")
                     #:gitstat-width 460 #:gitstat-radius 80
                     #:altcolors '(["Racket" . "Green"]
                                   ["Python" . "Khaki"])]

@handbook-smart-table[]

@include-section{2022.scrbl}

@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@handbook-appendix[#:index-section? #true #:numbered? #false]
